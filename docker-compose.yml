version: '3.8'

services:
  # Image Optimization Service
  image-optimization-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: image-optimization-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - UV_THREADPOOL_SIZE=16
      - SHARP_CACHE_MEMORY=2048
      - SHARP_CONCURRENCY=4
    volumes:
      # Mount uploads directory for persistent file storage
      - ./uploads:/app/uploads
      # Optional: Mount logs directory
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - image-optimization-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - image-optimization-api
    restart: unless-stopped
    networks:
      - image-optimization-network
    profiles:
      - production

  # Optional: Redis for caching (if needed in future)
  redis:
    image: redis:7-alpine
    container_name: image-optimization-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - image-optimization-network
    profiles:
      - cache
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

volumes:
  redis_data:
    driver: local

networks:
  image-optimization-network:
    driver: bridge